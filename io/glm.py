import itertools

import numpy as np
import xarray as xr


class GLMDataset(object):
    def __init__(self, filename):
        """ filename is any data source which works with xarray.open_dataset """
        self.dataset = xr.open_dataset(filename)

        self.fov_dim = 'number_of_field_of_view_bounds'
        self.wave_dim = 'number_of_wavelength_bounds'
        self.time_dim = 'number_of_time_bounds'
        self.gr_dim = 'number_of_groups'
        self.ev_dim = 'number_of_events'
        self.fl_dim = 'number_of_flashes'

        self.split_flashes = self.dataset.groupby('flash_id')
        self.split_groups = self.dataset.groupby('group_parent_flash_id')
        self.split_events = self.dataset.groupby('event_parent_group_id')
        
        if len(getattr(self.dataset, self.fl_dim)) > 0:
            self.energy_min, self.energy_max = 0, self.dataset.flash_energy.max()
        else:
            # there are no flashes
            pass
            



        # for k, v in self.split_groups.groups.items():
        #     print k,v

    @property
    def fov_bounds(self):
#         lat_bnd = self.dataset.lat_field_of_view_bounds.data
#         lon_bnd = self.dataset.lon_field_of_view_bounds.data
        lat_bnd = self.dataset.event_lat.min().data, self.dataset.event_lat.max().data
        lon_bnd = self.dataset.event_lon.min().data, self.dataset.event_lon.max().data
        return lon_bnd,lat_bnd

    def get_flash(self, some_flash):
        """ Subset the dataset to a single flash whose index is given by some_flash"""
        
        # The list of indices returned by the group dictionary correspond to the 
        # indices automatically generated by xarray for each dimension, and
        # don't correspond to the flash_id and group_id columns
        fl_idx = self.split_flashes.groups[some_flash]
        gr_idx = self.split_groups.groups[some_flash]

        #get just this flash and its groups
        grp_sub = self.dataset[{self.fl_dim:fl_idx,
                                self.gr_dim:gr_idx
                               }]

        # get event ids for each group and chain them together into one list
        ev_iter = (self.split_events.groups[gid] for gid in grp_sub.group_id.data)
        ev_idx = list(itertools.chain.from_iterable(ev_iter))

        # get just the events that correspond to this flash
        this_flash = grp_sub[{self.ev_dim:ev_idx}]
        return this_flash

